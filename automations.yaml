- id: '1584476995764'
  alias: Notification - SWMBO Arrives
  description: ''
  trigger:
  - entity_id: person.kirstyn_rolfe
    platform: state
    to: home
  condition:
  - condition: not
    conditions:
    - condition: state
      entity_id: person.dyson_parkes
      state: home
    alias: Confirm Dyson is out
  action:
  - data:
      message: Kirstyn just arrived
      title: Kirstyn's Home
    alias: Mobile notification
    action: notify.mobile_app_bnet_reno12
  - data:
      message: Kirstyn just arrived
      title: Kirstyn's Home
    alias: Browser notification
    action: notify.html5_notifications
  mode: single
- id: '1597613199016'
  alias: 'Lovelace: convert lovelace.json to lovelace-ui.yaml'
  description: Convert lovelace.json to lovelace-ui.yaml
  trigger:
  - platform: event
    event_type: lovelace_updated
    event_data: {}
    context:
      user_id:
      - 08d29e434e9a4bed98b3a62218eac7a7
  action:
  - service: shell_command.convert_lovelace
  mode: single
- id: '1602904795038'
  alias: Notification - HAss Update Available
  description: ''
  trigger:
  - platform: state
    entity_id:
    - update.home_assistant_core_update
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 0
  condition:
  - condition: state
    entity_id: input_boolean.silent_mode
    state: 'off'
  action:
  - data:
      message: Home Assistant {{ state_attr('update.home_assistant_core_update', 'latest_version')
        }} is available.
      title: Update Available!
      target:
      - '819351502640381952'
    alias: Discord notification
    action: notify.homeassistant
  - data:
      message: Home Assistant {{ state_attr('update.home_assistant_core_update', 'latest_version')
        }} is available.
    alias: Facebook notification
    action: notify.facebook_text
  - device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
    domain: mobile_app
    type: notify
    title: '{{ notification_title }}'
    message: '{{ notification_message }}'
    alias: Notify Oppo Reno12 - Mobile
    enabled: true
  variables:
    notification_title: Home Assistant Update Available!
    notification_message: '        Home Assistant {{ state_attr(''update.home_assistant_core_update'',
      ''latest_version'') }} is available.'
  mode: single
- id: '1603311446063'
  alias: Github - Convert Lovelace json to yaml and commit
  description: ''
  trigger:
  - platform: event
    event_type: lovelace_updated
    event_data: {}
  condition: []
  action:
  - service: shell_command.convert_lovelace
  - delay: '5'
  - service: shell_command.commit_lovelace
    data: {}
  initial_state: false
  mode: single
- id: '1605335470308'
  alias: Notification - SWMBO home and away
  description: Is she home or isn't she?
  trigger:
  - platform: state
    entity_id: person.kirstyn_rolfe
    from: home
    to: not_home
  - platform: state
    entity_id: person.kirstyn_rolfe
    from: not_home
    to: home
  condition: []
  action:
  - service: persistent_notification.create
    data:
      notification_id: Kirstyn
      title: Kirstyn is {{ trigger.to_state.state }}
      message: Kirstyn went from {{ trigger.from_state.state }} to {{ trigger.to_state.state
        }} at {{ now().strftime('%H:%M %d/%m/%Y') }}
  mode: single
- id: '1608262512161'
  alias: Notification - Happy Birthday Sir
  description: A silly little automation to have HAss wish me happy birthday
  trigger:
  - platform: state
    entity_id:
    - sensor.birthday_me
    to: '0'
    for:
      hours: 7
      minutes: 0
      seconds: 0
  condition:
  - condition: state
    entity_id: input_boolean.silent_mode
    state: 'off'
  action:
  - service: notify.notify
    data:
      message: Happy Birthday Sir!
      title: Bappy Hirthday
  mode: single
- id: '1608262874242'
  alias: Notification - Birthday Reminders
  description: Remind me of upcoming birthdays
  trigger:
  - platform: state
    entity_id:
    - sensor.birthday_swmbo
    - sensor.birthday_me
    to: '1'
  condition: []
  action:
  - service: persistent_notification.create
    data:
      notification_id: Birthday
      title: Upcoming birthday!
      message: '''{{trigger.to_state.attributes.friendly_name}} is tomorrow!'''
  mode: single
- id: '1608606143148'
  alias: System - Install additional packages
  description: Installs packages defined in a shell script
  trigger:
  - platform: homeassistant
    event: start
  condition: []
  action:
  - delay: 00:00:10
  - service: shell_command.install_extra_packages
    data: {}
  mode: single
  initial_state: false
- id: '1618826864131'
  alias: Notification - Welcome Home Sir
  description: ''
  trigger:
  - platform: state
    entity_id:
    - person.dyson_parkes
    to: home
    for:
      hours: 0
      minutes: 2
      seconds: 0
  condition:
  - condition: state
    entity_id: input_boolean.silent_mode
    state: 'off'
  - condition: time
    before: '23:00:00'
    after: 08:00:00
    alias: Not nighttime
  - condition: not
    conditions:
    - condition: state
      entity_id: person.kirstyn_rolfe
      state: home
      alias: Kirstyn location check
    alias: Kirstyn isn't home
  action:
  - service: notify.alexa_media_lounge_dot
    data:
      data:
        type: tts
        target: media_player.lounge_dot
      message: Welcome home m'lord
    alias: Welcome home via lounge dot
    enabled: false
  - service: notify.alexa_media_doppler
    data:
      data:
        type: tts
        target: media_player.doppler
      message: Welcome home m'lord
    alias: Welcome home via doppler
    enabled: true
  mode: single
- id: '1621926272836'
  alias: Lights - Turn on to greet me
  description: ''
  trigger:
  - platform: zone
    entity_id: person.dyson_parkes
    zone: zone.home
    event: enter
  condition:
  - condition: and
    conditions:
    - condition: sun
      before: sunrise
      after: sunset
      alias: Confirm the sun's not up
    - condition: state
      entity_id: input_boolean.silent_mode
      state: 'off'
  action:
  - service: light.turn_on
    data:
      transition: 2
    target:
      entity_id: light.lifx_switch_6c31d6_porch
  - service: light.turn_on
    data:
      transition: 2
      brightness_pct: 100
    target:
      entity_id: light.bedroom
    enabled: false
  mode: single
- id: '1623151855818'
  alias: Amp Power - Sync sub with amp
  description: ''
  trigger:
  - platform: state
    entity_id:
    - media_player.lounge_amp_3
    for:
      hours: 0
      minutes: 0
      seconds: 1
  - platform: homeassistant
    event: start
  condition: []
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: media_player.lounge_amp_3
        state: 'off'
      sequence:
      - target:
          entity_id: switch.subwoofer
        data: {}
        action: switch.turn_off
    - conditions:
      - condition: state
        state: standby
        entity_id: media_player.lounge_amp_3
      sequence:
      - target:
          entity_id: switch.subwoofer
        data: {}
        action: switch.turn_off
    - conditions:
      - condition: state
        entity_id: media_player.lounge_amp_3
        state: idle
        enabled: true
      sequence:
      - target:
          entity_id: switch.subwoofer
        data: {}
        action: switch.turn_off
    - conditions:
      - condition: state
        entity_id: media_player.lounge_amp_3
        state: unavailable
        enabled: true
      sequence:
      - target:
          entity_id: switch.subwoofer
        data: {}
        action: switch.turn_off
    default:
    - data: {}
      target:
        entity_id: switch.subwoofer
      action: switch.turn_on
  mode: single
- id: '1638231245218'
  alias: Notification - HACS Updates Available
  description: ''
  trigger:
  - platform: numeric_state
    entity_id: sensor.hacs
    above: '0'
  condition:
  - condition: state
    entity_id: input_boolean.silent_mode
    state: 'off'
  action:
  - service: persistent_notification.create
    data:
      notification_id: hacs_updates
      title: HACS Update
      message: Updates available in {{ states('sensor.hacs') }} [HACS repo{% if states('sensor.hacs')
        | int > 1 %}s{% endif %}](/hacs)
  - service: notify.facebook_text
    data:
      message: Updates available in {{ states('sensor.hacs') }} HACS repo{% if states('sensor.hacs')
        | int > 1 %}s{% endif %} {% for repo in states.sensor.hacs.attributes.repositories
        %} {{ repo.name }} {% endfor %}
    alias: Facebook notification
  - service: notify.homeassistant
    data:
      message: 'Updates available in {{ states(''sensor.hacs'') }} HACS repo{% if
        states(''sensor.hacs'') | int > 1 %}s{% endif %}\: {% for repo in states.sensor.hacs.attributes.repositories
        %} {{repo.name }}, {{repo.installed_version}} -> {{repo.available_version}}
        {% endfor %}'
      title: HACS Updates available
      target:
      - '819351502640381952'
    alias: Discord notification
  mode: single
- id: '1638232674502'
  alias: Notification - HACS Updates Installed
  description: Dismiss persistent_notification for hacs updates
  trigger:
  - platform: numeric_state
    entity_id: sensor.hacs
    below: '1'
  condition: []
  action:
  - service: persistent_notification.dismiss
    data:
      notification_id: hacs_updates
  mode: single
- id: '1639688722323'
  alias: Amp Power - Sync sub with amp (on startup)
  description: ''
  trigger:
  - platform: homeassistant
    event: start
  condition: []
  action:
  - choose:
    - conditions:
      - condition: not
        conditions:
        - condition: state
          entity_id: media_player.lounge_amp_3
          state: 'off'
          alias: Confirm lounge amp is not off
      sequence:
      - service: switch.turn_on
        target:
          entity_id: switch.subwoofer
        data: {}
    - conditions:
      - condition: state
        entity_id: media_player.lounge_amp_3
        state: 'off'
      sequence:
      - service: switch.turn_off
        target:
          entity_id: switch.subwoofer
        data: {}
    default: []
  mode: single
- id: '1651206195438'
  alias: Notification - HAssOS Update Available
  description: ''
  trigger:
  - platform: state
    entity_id:
    - update.home_assistant_operating_system_update
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 1
  condition:
  - condition: state
    entity_id: input_boolean.silent_mode
    state: 'off'
  action:
  - service: notify.html5_notifications
    data:
      message: Home Assistant OS {{ state_attr('update.home_assistant_operating_system_update',
        'latest_version') }} is available.
      title: Update Available
    alias: Browser notification
  - service: notify.homeassistant
    data:
      message: Home Assistant OS {{ state_attr('update.home_assistant_operating_system_update',
        'latest_version') }} is available.
      title: Update Available!
      target:
      - '819351502640381952'
    alias: Discord notification
  - service: notify.facebook_text
    data:
      message: Home Assistant OS {{ state_attr('update.home_assistant_operating_system_update',
        'latest_version') }} is available.
    alias: Facebook notification
  mode: single
- id: '1655351847580'
  alias: Amp Volume - Change Input
  description: Changes volume on the Lounge amplifier to suit whatever levels are
    received from the differing sources
  trigger:
  - platform: state
    entity_id:
    - media_player.lounge_amp_2
    for:
      hours: 0
      minutes: 0
      seconds: 0
    attribute: media_title
  condition: []
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: media_player.lounge_amp_2
        attribute: media_title
        state: BD/DVD
        for:
          hours: 0
          minutes: 0
          seconds: 0
        alias: PC (BD/DVD)
      sequence:
      - service: media_player.volume_set
        target:
          entity_id: media_player.lounge_amp_2
        data:
          volume_level: 0.73
    - conditions:
      - condition: state
        entity_id: media_player.lounge_amp_2
        attribute: media_title
        state: GAME
        for:
          hours: 0
          minutes: 0
          seconds: 0
        alias: PS5 (GAME)
      sequence:
      - service: media_player.volume_set
        target:
          entity_id: media_player.lounge_amp_2
        data:
          volume_level: 0.27
    - conditions:
      - condition: state
        entity_id: media_player.lounge_amp_2
        attribute: media_title
        state: SA-CD/CD
        for:
          hours: 0
          minutes: 0
          seconds: 0
        alias: Xbox SX (SA-CD/CD)
      sequence:
      - service: media_player.volume_set
        target:
          entity_id: media_player.lounge_amp_2
        data:
          volume_level: 0.335
    - conditions:
      - condition: state
        entity_id: media_player.lounge_amp_2
        attribute: media_title
        state: VIDEO 2
        for:
          hours: 0
          minutes: 0
          seconds: 0
        alias: Xbox One (VIDEO 2)
      sequence:
      - service: media_player.volume_set
        target:
          entity_id: media_player.lounge_amp_2
        data:
          volume_level: 0.335
    - conditions:
      - condition: state
        entity_id: media_player.lounge_amp_2
        attribute: media_title
        state: TV
        for:
          hours: 0
          minutes: 0
          seconds: 0
        alias: TV
      sequence:
      - service: media_player.volume_set
        target:
          entity_id: media_player.lounge_amp_2
        data:
          volume_level: 0.27
    default: []
  mode: single
- id: '1665709420254'
  alias: Doppler - Button 1
  description: Toggles a light on push of Doppler smart button 1
  trigger:
  - platform: device
    domain: sandman_doppler
    device_id: 71b40ef41901e6650f2ec43ddd2b63dc
    button: 1
    type: sandman_doppler_button_pressed
    subtype: 1
  condition: []
  action:
  - service: light.toggle
    data: {}
    target:
      entity_id: light.bedroom_light
  mode: single
- id: '1665709479272'
  alias: Doppler - Button 2
  description: Toggles a light on push of Doppler smart button 2
  trigger:
  - platform: device
    domain: sandman_doppler
    device_id: 71b40ef41901e6650f2ec43ddd2b63dc
    button: 2
    type: sandman_doppler_button_pressed
    subtype: 2
  condition: []
  action:
  - service: light.toggle
    data: {}
    target:
      entity_id: light.bedroom_lamp
  mode: single
- id: '1666768764502'
  alias: Printer - Notify if out of paper
  description: Talks through the speakers to notify if the printer runs out of paper
  trigger:
  - platform: state
    entity_id:
    - sensor.mfc_9340cdw_status
    for:
      hours: 0
      minutes: 0
      seconds: 0
  condition:
  - condition: state
    entity_id: input_boolean.silent_mode
    state: 'off'
  - condition: time
    before: '23:00:00'
    after: 08:00:00
    alias: Not nighttime
  action:
  - service: notify.alexa_media_dyson_s_echo_dot
    data:
      data:
        type: tts
        target: media_player.dyson_s_echo_dot
      message: The printer has run out of paper
    alias: Printer status via lounge dot
    enabled: true
  mode: single
- id: '1679630068333'
  alias: 1-NSPanel Configuration
  description: ''
  use_blueprint:
    path: Blackymas/nspanel_blueprint.yaml
    input:
      language: ENG
      nspanel_name: devpanel
      delay: 4
      weather: AccuWeather
      weather_entity: weather.home
      left_button_entity: light.office_light
      left_button_name: Light
      right_button_entity: light.office_lamp
      right_button_name: Lamp
- id: '1688357078253'
  alias: Garage Lights (Switch toggle all)
  description: Allows the bottom switch on the garage panel to toggle all lights in
    the area.
  trigger:
  - platform: device
    device_id: 06ba335d596e242b91bb5ffd677c8d0e
    domain: homekit_controller
    type: button4
    subtype: single_press
  condition: []
  action:
  - service: light.toggle
    data: {}
    target:
      area_id: garage
  mode: single
- id: '1694906150147'
  alias: Automation - empty the house
  description: Turn off all lights when the last person leaves the house
  trigger:
  - platform: state
    entity_id:
    - zone.home
    to: '0'
    for:
      hours: 0
      minutes: 30
      seconds: 0
  condition:
  - alias: Confirm phone is not on home wifi
    condition: not
    conditions:
    - condition: state
      entity_id: sensor.bnet_reno12_wifi_connection
      state: Berserkir-Net
    enabled: false
  action:
  - data: {}
    target:
      entity_id:
      - light.all_lights
      - light.all_lamps
    alias: Turn off "All Lights" and "All Lamps"
    action: light.turn_off
  - if:
    - condition: template
      value_template: '  {% if not is_state(''select.front_door_recording_mode'',
        ''Detections'') %}true{% endif %}'
      alias: Confirm if the Front Camera is not set to Motion
    then:
    - metadata: {}
      data:
        option: Detections
      target:
        entity_id: select.front_door_recording_mode
      alias: Set Front Door Camera back to record on motion
      action: select.select_option
    alias: Set the Front Door camera to Motion if it's not
  mode: single
- id: '1713308537578'
  alias: Motion - Front Door Camera
  description: Send a notification if motion is detected by cameras and nobody is
    home
  trigger:
  - platform: state
    entity_id: binary_sensor.front_door_motion
    from: 'off'
    to: 'on'
    alias: Motion at Front Door
  condition: []
  action:
  - entity_id: camera.front_door_high
    data:
      filename: '{{ snapshot_create_file_path }}'
    action: camera.snapshot
    alias: Create motion snapshot
  - alias: Turn on porch light if motion activation is on and it's dark
    if:
    - condition: state
      entity_id: input_boolean.front_door_motion_light
      state: 'on'
    - type: is_on
      condition: device
      device_id: 4b8020c3a743f4a57e058fb2d8e87739
      entity_id: 0bcb583a926e88bf9ae0c5af59a7a149
      domain: binary_sensor
      alias: Front Door camera is dark
    then:
    - action: light.turn_on
      metadata: {}
      data: {}
      target:
        entity_id: light.lifx_switch_6c31d6_porch
      alias: Turn on porch light
  - device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
    domain: mobile_app
    type: notify
    title: '{{ notification_title }}'
    message: '{{ notification_message }}'
    data: '{% set android_data = {"image": "%s"} | format(snapshot_access_file_path)
      %} {% set ios_data = {"attachment": {"url": "%s", "content_type": "JPEG"}} |
      format(snapshot_access_file_path) %} {{ ios_data if is_ios else android_data
      }}'
    alias: Notify Oppo Reno12 - Mobile
    enabled: false
  - choose:
    - conditions:
      - condition: state
        entity_id: zone.home
        state: '0'
        alias: Confirm nobody is home
      - condition: state
        entity_id: input_boolean.silent_mode
        state: 'off'
      sequence:
      - device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
        domain: mobile_app
        type: notify
        title: '{{ notification_title }}'
        message: '{{ notification_message }}'
        data: '{% set android_data = {"image": "%s"} | format(snapshot_access_file_path)
          %} {% set ios_data = {"attachment": {"url": "%s", "content_type": "JPEG"}}
          | format(snapshot_access_file_path) %} {{ ios_data if is_ios else android_data
          }}'
        alias: Notify Oppo Reno12 - Mobile
      alias: Notify if nobody is home and dnd is off
    - conditions:
      - condition: not
        conditions:
        - condition: state
          entity_id: zone.home
          state: '0'
          alias: Confirm nobody is home
        alias: Confirm home has someone in it
      - condition: state
        entity_id: input_boolean.motion_notifications
        state: 'on'
      - condition: state
        entity_id: input_boolean.silent_mode
        state: 'off'
      sequence:
      - device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
        domain: mobile_app
        type: notify
        title: '{{ notification_title }}'
        message: '{{ notification_message }}'
        data: '{% set android_data = {"image": "%s"} | format(snapshot_access_file_path)
          %} {% set ios_data = {"attachment": {"url": "%s", "content_type": "JPEG"}}
          | format(snapshot_access_file_path) %} {{ ios_data if is_ios else android_data
          }}'
        alias: Notify Oppo Reno12 - Mobile
      alias: Notify if notifications are on and house isn't silent
  variables:
    motion_sensor: binary_sensor.front_door_motion
    motion_sensor_name: '{{ states[motion_sensor].name }}'
    camera: camera.front_door_high
    notify_device: e9f5ed78657f507d268be05f2ba5119d
    is_ios: false
    notification_title: Motion detected!
    notification_message: '{{ motion_sensor_name }} detected movement!'
    delay: 6
    snapshot_create_file_path: /config/www/tmp/snapshot_{{ states[camera].object_id
      }}.jpg
    snapshot_access_file_path: '{{ snapshot_create_file_path | replace(''/config/www'',''/local'')
      }}'
  mode: single
- id: '1714359343699'
  alias: Notification - Rack UPS has lost power
  description: ''
  trigger:
  - alias: Input Voltage drops
    type: voltage
    platform: device
    device_id: 58a59dd95bfaeda8f7edc53ca2980388
    entity_id: 85b741fd9ea2e80d5f9f59b95620ad86
    domain: sensor
    below: 120
  condition:
  - alias: Confirm NOT
    condition: not
    conditions:
    - condition: zone
      entity_id: person.dyson_parkes
      zone: zone.home
      alias: Check Dyson isn't home
  action:
  - data:
      message: The rack UPS has lost power
      title: Power Failure
    alias: Browser notification
    action: notify.html5_notifications
  - data:
      message: The rack UPS has lost power
      title: Power Failure
    alias: Mobile notification
    action: notify.mobile_app_bnet_reno12
  mode: single
- id: '1720685093544'
  alias: Front door light motion trigger
  description: ''
  trigger:
  - type: motion
    platform: device
    device_id: 4b8020c3a743f4a57e058fb2d8e87739
    entity_id: 1ac1eaf9e3b055f0ae32cb5f4348b008
    domain: binary_sensor
    alias: Motion detected on front door camera
  condition:
  - condition: state
    entity_id: input_boolean.front_door_motion_light
    state: 'on'
    alias: Check motion triggering is active
  action:
  - service: light.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: light.lifx_switch_6c31d6_porch
    alias: Turn on porch light
  mode: single
- id: '1720685277657'
  alias: Light - activate porch motion trigger
  description: ''
  trigger:
  - platform: device
    device_id: 11a829db81b9e8ab2c8def0bfcdbca8d
    domain: homekit_controller
    type: button2
    subtype: long_press
    alias: Hall button 2 long-pressed
  - platform: device
    device_id: 11a829db81b9e8ab2c8def0bfcdbca8d
    domain: homekit_controller
    type: button2
    subtype: double_press
    alias: Hall button 2 double-pressed
  condition: []
  action:
  - service: input_boolean.toggle
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.front_door_motion_light
    alias: Toggle front door motion triggering
  mode: single
- id: '1726543997412'
  alias: Notification - System Updates
  description: ''
  trigger:
  - id: new
    platform: state
    entity_id:
    - update.home_assistant_core_update
    - update.home_assistant_operating_system_update
    - update.home_assistant_supervisor_update
    to: 'on'
  - id: started
    platform: state
    entity_id:
    - update.home_assistant_core_update
    - update.home_assistant_operating_system_update
    - update.home_assistant_supervisor_update
    attribute: in_progress
    from: false
    to: true
  - id: done
    platform: state
    entity_id:
    - update.home_assistant_core_update
    - update.home_assistant_operating_system_update
    - update.home_assistant_supervisor_update
    from: 'on'
    to: 'off'
  - id: install
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: install-update
  - id: install_ios
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      actionName: install-update
  - id: skip
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: skip-update
  - id: skip_ios
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      actionName: skip-update
  - id: core_check
    platform: template
    value_template: "{% set ns = namespace(core=none) %} {% for u in integration_entities('hassio')
      | select('in', update_entities)\n        if (device_attr(u, 'identifiers') |
      first)[1] == 'core' %}\n    {% set ns.core = u %}\n{% endfor %} {% if run_config_check
      and ns.core is string and expand(ns.core) | first | attr('state') == 'on' %}\n
      \ {% for e in expand(integration_entities('hassio')) | selectattr('attributes.device_class',
      'eq', 'running')\n        if (device_attr(e.entity_id, 'identifiers') | first)[1]
      == 'core_check_config' %}\n      {{ e.state == 'off' and e.last_changed > expand(ns.core)
      | first | attr('last_changed') }}\n  {% endfor %}\n{% else %}\n  {{ false }}\n{%
      endif %}"
  - id: ha_start
    platform: homeassistant
    event: start
  - platform: template
    value_template: "{{ states.update | selectattr('state', 'eq', 'on') | list | count
      > 0\n  and reminder_hours > 0 and now().hour % reminder_hours == 0\n  and now().minute
      == 0 and now().second == 0 }}"
  - id: sticky_ios
    platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: URI
  action:
  - choose:
    - alias: Install update action
      conditions:
      - condition: template
        value_template: '{{ trigger.id in [''install'', ''install_ios''] }}'
      sequence:
      - variables:
          entity_id: "update.{{ trigger.event.data.tag\n  if trigger.event.data.tag
            is string and trigger.event.data.tag != ''\n  else trigger.event.data.action_data.tag
            }}"
      - data:
          entity_id: '{{ entity_id }}'
          backup: '{% set ids = device_attr(entity_id, ''identifiers'') | first %}
            {{ take_backup and ids[0] == ''hassio'' and ids[1] not in [''supervisor'',
            ''OS''] }}'
        action: update.install
    - alias: Skip update action
      conditions:
      - condition: template
        value_template: '{{ trigger.id in [''skip'', ''skip_ios''] }}'
      sequence:
        data:
          entity_id: "update.{{ trigger.event.data.tag\n  if trigger.event.data.tag
            is string and trigger.event.data.tag != ''\n  else trigger.event.data.action_data.tag
            }}"
        action: update.skip
    - alias: Update completed
      conditions:
      - condition: template
        value_template: '{{ trigger.id == ''done'' }}'
      sequence:
      - variables:
          entity_id: '{{ trigger.entity_id }}'
      - variables:
          message: clear_notification
          data:
            tag: '{{ entity_id[7:] }}'
      - choose: []
        default:
        - variables:
            data: '{{ dict(data, action_data={''tag'': data.tag}) }}'
        - choose:
            alias: Send to first mobile device if specified
            conditions:
            - condition: template
              value_template: '{{ not not mobile_app_device }}'
            sequence:
              device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
              domain: mobile_app
              type: notify
              title: '{{ title | default('''') }}'
              message: "{{ message if device_attr(mobile_app_device, 'manufacturer')
                != 'Apple'\n    else message | replace('<br>', '\\n') }}"
              data: "{{ data if\n      device_attr(mobile_app_device, 'manufacturer')
                != 'Apple' or data.icon_url is not string\n    else dict(data, image=data.icon_url)
                }}"
        - choose:
          - alias: Send to second mobile device if specified
            conditions:
            - condition: template
              value_template: '{{ not not mobile_app_device_2 }}'
            sequence:
              device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
              domain: mobile_app
              type: notify
              title: '{{ title | default('''') }}'
              message: "{{ message if device_attr(mobile_app_device_2, 'manufacturer')
                != 'Apple'\n    else message | replace('<br>', '\\n') }}"
              data: "{{ data if\n      device_attr(mobile_app_device_2, 'manufacturer')
                != 'Apple' or data.icon_url is not string\n    else dict(data, image=data.icon_url)
                }}"
      - alias: Dismiss from HA if replicating there
        choose:
        - conditions:
          - condition: template
            value_template: '{{ send_to_ha }}'
          sequence:
            data:
              notification_id: '{{ entity_id[7:] }}'
            action: persistent_notification.dismiss
    - alias: On startup, dismiss core and os notifications as they occurred while
        off
      conditions:
      - condition: template
        value_template: '{{ trigger.id == ''ha_start'' }}'
      sequence:
      - alias: Dismiss core update notification if off
        choose:
          conditions:
          - condition: template
            value_template: '{{ core_update_entity != '''' and expand(core_update_entity)
              | first | attr(''state'') == ''off'' }}'
          sequence:
          - variables:
              entity_id: '{{ core_update_entity }}'
          - variables:
              message: clear_notification
              data:
                tag: '{{ entity_id[7:] }}'
          - choose: []
            default:
            - variables:
                data: '{{ dict(data, action_data={''tag'': data.tag}) }}'
            - choose:
                alias: Send to first mobile device if specified
                conditions:
                - condition: template
                  value_template: '{{ not not mobile_app_device }}'
                sequence:
                  device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
                  domain: mobile_app
                  type: notify
                  title: '{{ title | default('''') }}'
                  message: "{{ message if device_attr(mobile_app_device, 'manufacturer')
                    != 'Apple'\n    else message | replace('<br>', '\\n') }}"
                  data: "{{ data if\n      device_attr(mobile_app_device, 'manufacturer')
                    != 'Apple' or data.icon_url is not string\n    else dict(data,
                    image=data.icon_url) }}"
            - choose:
              - alias: Send to second mobile device if specified
                conditions:
                - condition: template
                  value_template: '{{ not not mobile_app_device_2 }}'
                sequence:
                  device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
                  domain: mobile_app
                  type: notify
                  title: '{{ title | default('''') }}'
                  message: "{{ message if device_attr(mobile_app_device_2, 'manufacturer')
                    != 'Apple'\n    else message | replace('<br>', '\\n') }}"
                  data: "{{ data if\n      device_attr(mobile_app_device_2, 'manufacturer')
                    != 'Apple' or data.icon_url is not string\n    else dict(data,
                    image=data.icon_url) }}"
          - alias: Dismiss from HA if replicating there
            choose:
            - conditions:
              - condition: template
                value_template: '{{ send_to_ha }}'
              sequence:
                data:
                  notification_id: '{{ entity_id[7:] }}'
                action: persistent_notification.dismiss
      - alias: Dismiss os update notification if off
        choose:
        - conditions:
          - condition: template
            value_template: '{{ os_update_entity != '''' and expand(os_update_entity)
              | first | attr(''state'') == ''off'' }}'
          sequence:
          - variables:
              entity_id: '{{ os_update_entity }}'
          - variables:
              message: clear_notification
              data:
                tag: '{{ entity_id[7:] }}'
          - choose: []
            default:
            - variables:
                data: '{{ dict(data, action_data={''tag'': data.tag}) }}'
            - choose:
                alias: Send to first mobile device if specified
                conditions:
                - condition: template
                  value_template: '{{ not not mobile_app_device }}'
                sequence:
                  device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
                  domain: mobile_app
                  type: notify
                  title: '{{ title | default('''') }}'
                  message: "{{ message if device_attr(mobile_app_device, 'manufacturer')
                    != 'Apple'\n    else message | replace('<br>', '\\n') }}"
                  data: "{{ data if\n      device_attr(mobile_app_device, 'manufacturer')
                    != 'Apple' or data.icon_url is not string\n    else dict(data,
                    image=data.icon_url) }}"
            - choose:
              - alias: Send to second mobile device if specified
                conditions:
                - condition: template
                  value_template: '{{ not not mobile_app_device_2 }}'
                sequence:
                  device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
                  domain: mobile_app
                  type: notify
                  title: '{{ title | default('''') }}'
                  message: "{{ message if device_attr(mobile_app_device_2, 'manufacturer')
                    != 'Apple'\n    else message | replace('<br>', '\\n') }}"
                  data: "{{ data if\n      device_attr(mobile_app_device_2, 'manufacturer')
                    != 'Apple' or data.icon_url is not string\n    else dict(data,
                    image=data.icon_url) }}"
          - alias: Dismiss from HA if replicating there
            choose:
            - conditions:
              - condition: template
                value_template: '{{ send_to_ha }}'
              sequence:
                data:
                  notification_id: '{{ entity_id[7:] }}'
                action: persistent_notification.dismiss
    - alias: New update available
      conditions:
      - condition: template
        value_template: '{{ trigger.id == ''new'' }}'
      sequence:
      - variables:
          entity_id: '{{ trigger.entity_id }}'
      - variables:
          ids: '{{ device_attr(entity_id, ''identifiers'') | first }}'
          changelog_action:
            action: URI
            title: Changelog
            uri: "{% set version = state_attr(entity_id, 'latest_version') %} {{ state_attr(entity_id,
              'release_url')\n    | default(changelog_urls[entity_id] | default(''),
              true)\n    | regex_replace('(/CHANGELOG.md)$', '\\\\1#' ~ version |
              regex_replace('[^-\\\\w]'))\n    | default(None, true) }}"
          include_core_check: '{{ run_config_check and ids[0] == ''hassio'' and ids[1]
            == ''core'' }}'
          core_check_complete: "{% set ns = namespace(core=none) %} {% for u in integration_entities('hassio')
            | select('in', update_entities)\n        if (device_attr(u, 'identifiers')
            | first)[1] == 'core' %}\n    {% set ns.core = u %}\n{% endfor %} {% if
            run_config_check and ns.core is string and expand(ns.core) | first | attr('state')
            == 'on' %}\n  {% for e in expand(integration_entities('hassio')) | selectattr('attributes.device_class',
            'eq', 'running')\n        if (device_attr(e.entity_id, 'identifiers')
            | first)[1] == 'core_check_config' %}\n      {{ e.state == 'off' and e.last_changed
            > expand(ns.core) | first | attr('last_changed') }}\n  {% endfor %}\n{%
            else %}\n  {{ false }}\n{% endif %}"
          title: '{{ state_attr(entity_id, ''friendly_name'') }}'
          message: "{% set summary = state_attr(entity_id, 'release_summary') %} Newest
            version is {{ state_attr(entity_id, 'latest_version') }}<br> Installed
            version is {{ state_attr(entity_id, 'installed_version') }} {% if include_core_check
            %}\n  <br>Config check has {{ 'completed, check addon logs for status.'\n
            \   if core_check_complete else 'started, should be done soon.' }}\n{%
            endif %} {{ '<br>' ~ summary if summary is string }}"
          url: "{% set url = device_attr(entity_id, 'configuration_url') %} {% set
            ids = device_attr(entity_id, 'identifiers') | first %} {% if url is string
            %}\n  {{ url | regex_replace('^homeassistant://') }}\n{% elif ids[0] ==
            'hassio' and ids[1] in ['supervisor', 'OS'] %}\n  /hassio/system\n{% elif
            run_config_check and ids[0] == 'hassio' and ids[1] == 'core' %}\n  /hassio/addon/core_check_config/logs\n{%
            else %}\n  /config\n{% endif %}"
          data:
            tag: '{{ entity_id[7:] }}'
            channel: Updates
            group: Updates
            notification_icon: mdi:package-up
            icon_url: '{{ state_attr(entity_id, ''entity_picture'') | default('''',
              true) }}'
            url: '{{ url }}'
            clickAction: '{{ url }}'
            sticky: 'true'
            actions: "{{ ([changelog_action] if changelog_action.uri is string else
              []) + [update_action] +\n  ([] if ids[0] == 'hassio' and ids[1] == 'supervisor'
              else [skip_action]) }}"
      - choose:
        - alias: Only send to mobile devices if within provided time range
          conditions:
            condition: time
            after: 00:00:00
            before: 00:00:00
          sequence:
          - choose: []
            default:
            - variables:
                data: '{{ dict(data, action_data={''tag'': data.tag}) }}'
            - choose:
                alias: Send to first mobile device if specified
                conditions:
                - condition: template
                  value_template: '{{ not not mobile_app_device }}'
                sequence:
                  device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
                  domain: mobile_app
                  type: notify
                  title: '{{ title | default('''') }}'
                  message: "{{ message if device_attr(mobile_app_device, 'manufacturer')
                    != 'Apple'\n    else message | replace('<br>', '\\n') }}"
                  data: "{{ data if\n      device_attr(mobile_app_device, 'manufacturer')
                    != 'Apple' or data.icon_url is not string\n    else dict(data,
                    image=data.icon_url) }}"
            - choose:
              - alias: Send to second mobile device if specified
                conditions:
                - condition: template
                  value_template: '{{ not not mobile_app_device_2 }}'
                sequence:
                  device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
                  domain: mobile_app
                  type: notify
                  title: '{{ title | default('''') }}'
                  message: "{{ message if device_attr(mobile_app_device_2, 'manufacturer')
                    != 'Apple'\n    else message | replace('<br>', '\\n') }}"
                  data: "{{ data if\n      device_attr(mobile_app_device_2, 'manufacturer')
                    != 'Apple' or data.icon_url is not string\n    else dict(data,
                    image=data.icon_url) }}"
      - alias: Send to HA if replicating there
        choose:
        - conditions:
          - condition: template
            value_template: '{{ send_to_ha }}'
          sequence:
            data:
              notification_id: '{{ entity_id[7:] }}'
              title: '{{ title }}'
              message: "{{ '%s\\n\\n### More info\\n- [Open](%s)' % (message | replace('<br>',
                '\\n'), data.url) ~\n  ('\\n- [Changelog](%s)' % changelog_action.uri
                if changelog_action.uri is string else '') }}"
            action: persistent_notification.create
      - alias: Stop if this isn't core or we're not running a config check
        condition: '{{ include_core_check }}'
      - alias: Start config check addon
        data:
          addon: core_check_config
        action: hassio.addon_start
    - alias: Emulate sticky on IOS by recreating the notification
      conditions:
      - condition: template
        value_template: '{{ trigger.id == ''sticky_ios'' }}'
      - condition: template
        value_template: '{{ trigger.event.data.action_data is mapping and trigger.event.data.action_data.tag
          is string }}'
      - condition: template
        value_template: '{{ is_state(''update.'' ~ trigger.event.data.action_data.tag,
          ''on'') }}'
      sequence:
      - variables:
          entity_id: "update.{{ trigger.event.data.tag\n  if trigger.event.data.tag
            is string and trigger.event.data.tag != ''\n  else trigger.event.data.action_data.tag
            }}"
      - variables:
          ids: '{{ device_attr(entity_id, ''identifiers'') | first }}'
          changelog_action:
            action: URI
            title: Changelog
            uri: "{% set version = state_attr(entity_id, 'latest_version') %} {{ state_attr(entity_id,
              'release_url')\n    | default(changelog_urls[entity_id] | default(''),
              true)\n    | regex_replace('(/CHANGELOG.md)$', '\\\\1#' ~ version |
              regex_replace('[^-\\\\w]'))\n    | default(None, true) }}"
          include_core_check: '{{ run_config_check and ids[0] == ''hassio'' and ids[1]
            == ''core'' }}'
          core_check_complete: "{% set ns = namespace(core=none) %} {% for u in integration_entities('hassio')
            | select('in', update_entities)\n        if (device_attr(u, 'identifiers')
            | first)[1] == 'core' %}\n    {% set ns.core = u %}\n{% endfor %} {% if
            run_config_check and ns.core is string and expand(ns.core) | first | attr('state')
            == 'on' %}\n  {% for e in expand(integration_entities('hassio')) | selectattr('attributes.device_class',
            'eq', 'running')\n        if (device_attr(e.entity_id, 'identifiers')
            | first)[1] == 'core_check_config' %}\n      {{ e.state == 'off' and e.last_changed
            > expand(ns.core) | first | attr('last_changed') }}\n  {% endfor %}\n{%
            else %}\n  {{ false }}\n{% endif %}"
          title: '{{ state_attr(entity_id, ''friendly_name'') }}'
          message: "{% set summary = state_attr(entity_id, 'release_summary') %} Newest
            version is {{ state_attr(entity_id, 'latest_version') }}<br> Installed
            version is {{ state_attr(entity_id, 'installed_version') }} {% if include_core_check
            %}\n  <br>Config check has {{ 'completed, check addon logs for status.'\n
            \   if core_check_complete else 'started, should be done soon.' }}\n{%
            endif %} {{ '<br>' ~ summary if summary is string }}"
          url: "{% set url = device_attr(entity_id, 'configuration_url') %} {% set
            ids = device_attr(entity_id, 'identifiers') | first %} {% if url is string
            %}\n  {{ url | regex_replace('^homeassistant://') }}\n{% elif ids[0] ==
            'hassio' and ids[1] in ['supervisor', 'OS'] %}\n  /hassio/system\n{% elif
            run_config_check and ids[0] == 'hassio' and ids[1] == 'core' %}\n  /hassio/addon/core_check_config/logs\n{%
            else %}\n  /config\n{% endif %}"
          data:
            tag: '{{ entity_id[7:] }}'
            channel: Updates
            group: Updates
            notification_icon: mdi:package-up
            icon_url: '{{ state_attr(entity_id, ''entity_picture'') | default('''',
              true) }}'
            url: '{{ url }}'
            clickAction: '{{ url }}'
            sticky: 'true'
            actions: "{{ ([changelog_action] if changelog_action.uri is string else
              []) + [update_action] +\n  ([] if ids[0] == 'hassio' and ids[1] == 'supervisor'
              else [skip_action]) }}"
      - choose: []
        default:
        - variables:
            data: '{{ dict(data, action_data={''tag'': data.tag}) }}'
        - choose:
            alias: Send to first mobile device if specified
            conditions:
            - condition: template
              value_template: '{{ not not mobile_app_device }}'
            sequence:
              device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
              domain: mobile_app
              type: notify
              title: '{{ title | default('''') }}'
              message: "{{ message if device_attr(mobile_app_device, 'manufacturer')
                != 'Apple'\n    else message | replace('<br>', '\\n') }}"
              data: "{{ data if\n      device_attr(mobile_app_device, 'manufacturer')
                != 'Apple' or data.icon_url is not string\n    else dict(data, image=data.icon_url)
                }}"
        - choose:
          - alias: Send to second mobile device if specified
            conditions:
            - condition: template
              value_template: '{{ not not mobile_app_device_2 }}'
            sequence:
              device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
              domain: mobile_app
              type: notify
              title: '{{ title | default('''') }}'
              message: "{{ message if device_attr(mobile_app_device_2, 'manufacturer')
                != 'Apple'\n    else message | replace('<br>', '\\n') }}"
              data: "{{ data if\n      device_attr(mobile_app_device_2, 'manufacturer')
                != 'Apple' or data.icon_url is not string\n    else dict(data, image=data.icon_url)
                }}"
      - alias: Send to HA if replicating there
        choose:
        - conditions:
          - condition: template
            value_template: '{{ send_to_ha }}'
          sequence:
            data:
              notification_id: '{{ entity_id[7:] }}'
              title: '{{ title }}'
              message: "{{ '%s\\n\\n### More info\\n- [Open](%s)' % (message | replace('<br>',
                '\\n'), data.url) ~\n  ('\\n- [Changelog](%s)' % changelog_action.uri
                if changelog_action.uri is string else '') }}"
            action: persistent_notification.create
    - alias: Core check addon completed
      conditions:
      - condition: template
        value_template: '{{ trigger.id == ''core_check'' }}'
      sequence:
      - variables:
          entity_id: '{{ core_update_entity }}'
      - variables:
          ids: '{{ device_attr(entity_id, ''identifiers'') | first }}'
          changelog_action:
            action: URI
            title: Changelog
            uri: "{% set version = state_attr(entity_id, 'latest_version') %} {{ state_attr(entity_id,
              'release_url')\n    | default(changelog_urls[entity_id] | default(''),
              true)\n    | regex_replace('(/CHANGELOG.md)$', '\\\\1#' ~ version |
              regex_replace('[^-\\\\w]'))\n    | default(None, true) }}"
          include_core_check: '{{ run_config_check and ids[0] == ''hassio'' and ids[1]
            == ''core'' }}'
          core_check_complete: "{% set ns = namespace(core=none) %} {% for u in integration_entities('hassio')
            | select('in', update_entities)\n        if (device_attr(u, 'identifiers')
            | first)[1] == 'core' %}\n    {% set ns.core = u %}\n{% endfor %} {% if
            run_config_check and ns.core is string and expand(ns.core) | first | attr('state')
            == 'on' %}\n  {% for e in expand(integration_entities('hassio')) | selectattr('attributes.device_class',
            'eq', 'running')\n        if (device_attr(e.entity_id, 'identifiers')
            | first)[1] == 'core_check_config' %}\n      {{ e.state == 'off' and e.last_changed
            > expand(ns.core) | first | attr('last_changed') }}\n  {% endfor %}\n{%
            else %}\n  {{ false }}\n{% endif %}"
          title: '{{ state_attr(entity_id, ''friendly_name'') }}'
          message: "{% set summary = state_attr(entity_id, 'release_summary') %} Newest
            version is {{ state_attr(entity_id, 'latest_version') }}<br> Installed
            version is {{ state_attr(entity_id, 'installed_version') }} {% if include_core_check
            %}\n  <br>Config check has {{ 'completed, check addon logs for status.'\n
            \   if core_check_complete else 'started, should be done soon.' }}\n{%
            endif %} {{ '<br>' ~ summary if summary is string }}"
          url: "{% set url = device_attr(entity_id, 'configuration_url') %} {% set
            ids = device_attr(entity_id, 'identifiers') | first %} {% if url is string
            %}\n  {{ url | regex_replace('^homeassistant://') }}\n{% elif ids[0] ==
            'hassio' and ids[1] in ['supervisor', 'OS'] %}\n  /hassio/system\n{% elif
            run_config_check and ids[0] == 'hassio' and ids[1] == 'core' %}\n  /hassio/addon/core_check_config/logs\n{%
            else %}\n  /config\n{% endif %}"
          data:
            tag: '{{ entity_id[7:] }}'
            channel: Updates
            group: Updates
            notification_icon: mdi:package-up
            icon_url: '{{ state_attr(entity_id, ''entity_picture'') | default('''',
              true) }}'
            url: '{{ url }}'
            clickAction: '{{ url }}'
            sticky: 'true'
            actions: "{{ ([changelog_action] if changelog_action.uri is string else
              []) + [update_action] +\n  ([] if ids[0] == 'hassio' and ids[1] == 'supervisor'
              else [skip_action]) }}"
      - choose:
        - alias: Only send to mobile devices if within provided time range
          conditions:
            condition: time
            after: 00:00:00
            before: 00:00:00
          sequence:
          - choose: []
            default:
            - variables:
                data: '{{ dict(data, action_data={''tag'': data.tag}) }}'
            - choose:
                alias: Send to first mobile device if specified
                conditions:
                - condition: template
                  value_template: '{{ not not mobile_app_device }}'
                sequence:
                  device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
                  domain: mobile_app
                  type: notify
                  title: '{{ title | default('''') }}'
                  message: "{{ message if device_attr(mobile_app_device, 'manufacturer')
                    != 'Apple'\n    else message | replace('<br>', '\\n') }}"
                  data: "{{ data if\n      device_attr(mobile_app_device, 'manufacturer')
                    != 'Apple' or data.icon_url is not string\n    else dict(data,
                    image=data.icon_url) }}"
            - choose:
              - alias: Send to second mobile device if specified
                conditions:
                - condition: template
                  value_template: '{{ not not mobile_app_device_2 }}'
                sequence:
                  device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
                  domain: mobile_app
                  type: notify
                  title: '{{ title | default('''') }}'
                  message: "{{ message if device_attr(mobile_app_device_2, 'manufacturer')
                    != 'Apple'\n    else message | replace('<br>', '\\n') }}"
                  data: "{{ data if\n      device_attr(mobile_app_device_2, 'manufacturer')
                    != 'Apple' or data.icon_url is not string\n    else dict(data,
                    image=data.icon_url) }}"
      - alias: Send to HA if replicating there
        choose:
        - conditions:
          - condition: template
            value_template: '{{ send_to_ha }}'
          sequence:
            data:
              notification_id: '{{ entity_id[7:] }}'
              title: '{{ title }}'
              message: "{{ '%s\\n\\n### More info\\n- [Open](%s)' % (message | replace('<br>',
                '\\n'), data.url) ~\n  ('\\n- [Changelog](%s)' % changelog_action.uri
                if changelog_action.uri is string else '') }}"
            action: persistent_notification.create
    - alias: Update started
      conditions:
      - condition: template
        value_template: '{{ trigger.id == ''started'' }}'
      sequence:
      - variables:
          entity_id: '{{ trigger.entity_id }}'
      - variables:
          ids: '{{ device_attr(entity_id, ''identifiers'') | first }}'
          changelog_action:
            action: URI
            title: Changelog
            uri: "{% set version = state_attr(entity_id, 'latest_version') %} {{ state_attr(entity_id,
              'release_url')\n    | default(changelog_urls[entity_id] | default(''),
              true)\n    | regex_replace('(/CHANGELOG.md)$', '\\\\1#' ~ version |
              regex_replace('[^-\\\\w]'))\n    | default(None, true) }}"
          include_core_check: '{{ run_config_check and ids[0] == ''hassio'' and ids[1]
            == ''core'' }}'
          core_check_complete: "{% set ns = namespace(core=none) %} {% for u in integration_entities('hassio')
            | select('in', update_entities)\n        if (device_attr(u, 'identifiers')
            | first)[1] == 'core' %}\n    {% set ns.core = u %}\n{% endfor %} {% if
            run_config_check and ns.core is string and expand(ns.core) | first | attr('state')
            == 'on' %}\n  {% for e in expand(integration_entities('hassio')) | selectattr('attributes.device_class',
            'eq', 'running')\n        if (device_attr(e.entity_id, 'identifiers')
            | first)[1] == 'core_check_config' %}\n      {{ e.state == 'off' and e.last_changed
            > expand(ns.core) | first | attr('last_changed') }}\n  {% endfor %}\n{%
            else %}\n  {{ false }}\n{% endif %}"
          title: '{{ state_attr(entity_id, ''friendly_name'') }}'
          message: "{% set summary = state_attr(entity_id, 'release_summary') %} Newest
            version is {{ state_attr(entity_id, 'latest_version') }}<br> Installed
            version is {{ state_attr(entity_id, 'installed_version') }} {% if include_core_check
            %}\n  <br>Config check has {{ 'completed, check addon logs for status.'\n
            \   if core_check_complete else 'started, should be done soon.' }}\n{%
            endif %} {{ '<br>' ~ summary if summary is string }}"
          url: "{% set url = device_attr(entity_id, 'configuration_url') %} {% set
            ids = device_attr(entity_id, 'identifiers') | first %} {% if url is string
            %}\n  {{ url | regex_replace('^homeassistant://') }}\n{% elif ids[0] ==
            'hassio' and ids[1] in ['supervisor', 'OS'] %}\n  /hassio/system\n{% elif
            run_config_check and ids[0] == 'hassio' and ids[1] == 'core' %}\n  /hassio/addon/core_check_config/logs\n{%
            else %}\n  /config\n{% endif %}"
          data:
            tag: '{{ entity_id[7:] }}'
            channel: Updates
            group: Updates
            notification_icon: mdi:package-up
            icon_url: '{{ state_attr(entity_id, ''entity_picture'') | default('''',
              true) }}'
            url: '{{ url }}'
            clickAction: '{{ url }}'
            sticky: 'true'
            actions: "{{ ([changelog_action] if changelog_action.uri is string else
              []) + [update_action] +\n  ([] if ids[0] == 'hassio' and ids[1] == 'supervisor'
              else [skip_action]) }}"
      - variables:
          message: Updating...
          data: '{{ dict(data, actions=[changelog_action] if changelog_action.uri
            is string else []) }}'
      - choose:
        - alias: Only send to mobile devices if within provided time range
          conditions:
            condition: time
            after: 00:00:00
            before: 00:00:00
          sequence:
          - choose: []
            default:
            - variables:
                data: '{{ dict(data, action_data={''tag'': data.tag}) }}'
            - choose:
                alias: Send to first mobile device if specified
                conditions:
                - condition: template
                  value_template: '{{ not not mobile_app_device }}'
                sequence:
                  device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
                  domain: mobile_app
                  type: notify
                  title: '{{ title | default('''') }}'
                  message: "{{ message if device_attr(mobile_app_device, 'manufacturer')
                    != 'Apple'\n    else message | replace('<br>', '\\n') }}"
                  data: "{{ data if\n      device_attr(mobile_app_device, 'manufacturer')
                    != 'Apple' or data.icon_url is not string\n    else dict(data,
                    image=data.icon_url) }}"
            - choose:
              - alias: Send to second mobile device if specified
                conditions:
                - condition: template
                  value_template: '{{ not not mobile_app_device_2 }}'
                sequence:
                  device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
                  domain: mobile_app
                  type: notify
                  title: '{{ title | default('''') }}'
                  message: "{{ message if device_attr(mobile_app_device_2, 'manufacturer')
                    != 'Apple'\n    else message | replace('<br>', '\\n') }}"
                  data: "{{ data if\n      device_attr(mobile_app_device_2, 'manufacturer')
                    != 'Apple' or data.icon_url is not string\n    else dict(data,
                    image=data.icon_url) }}"
      - alias: Send to HA if replicating there
        choose:
        - conditions:
          - condition: template
            value_template: '{{ send_to_ha }}'
          sequence:
            data:
              notification_id: '{{ entity_id[7:] }}'
              title: '{{ title }}'
              message: "{{ '%s\\n\\n### More info\\n- [Open](%s)' % (message | replace('<br>',
                '\\n'), data.url) ~\n  ('\\n- [Changelog](%s)' % changelog_action.uri
                if changelog_action.uri is string else '') }}"
            action: persistent_notification.create
    - alias: Send reminders if enabled
      conditions:
      - condition: template
        value_template: '{{ reminder_hours > 0 }}'
      sequence:
      - alias: Get all pending, unstarted updates
        variables:
          updates: "{{ states.update\n    | selectattr('state', 'eq', 'on')\n    |
            rejectattr('attributes.in_progress', 'true')\n    | map(attribute='entity_id')
            | list }}"
      - alias: Loop over updates and send reminder
        repeat:
          count: '{{ updates | count }}'
          sequence:
          - variables:
              entity_id: '{{ updates[repeat.index - 1] }}'
          - variables:
              ids: '{{ device_attr(entity_id, ''identifiers'') | first }}'
              changelog_action:
                action: URI
                title: Changelog
                uri: "{% set version = state_attr(entity_id, 'latest_version') %}
                  {{ state_attr(entity_id, 'release_url')\n    | default(changelog_urls[entity_id]
                  | default(''), true)\n    | regex_replace('(/CHANGELOG.md)$', '\\\\1#'
                  ~ version | regex_replace('[^-\\\\w]'))\n    | default(None, true)
                  }}"
              include_core_check: '{{ run_config_check and ids[0] == ''hassio'' and
                ids[1] == ''core'' }}'
              core_check_complete: "{% set ns = namespace(core=none) %} {% for u in
                integration_entities('hassio') | select('in', update_entities)\n        if
                (device_attr(u, 'identifiers') | first)[1] == 'core' %}\n    {% set
                ns.core = u %}\n{% endfor %} {% if run_config_check and ns.core is
                string and expand(ns.core) | first | attr('state') == 'on' %}\n  {%
                for e in expand(integration_entities('hassio')) | selectattr('attributes.device_class',
                'eq', 'running')\n        if (device_attr(e.entity_id, 'identifiers')
                | first)[1] == 'core_check_config' %}\n      {{ e.state == 'off' and
                e.last_changed > expand(ns.core) | first | attr('last_changed') }}\n
                \ {% endfor %}\n{% else %}\n  {{ false }}\n{% endif %}"
              title: '{{ state_attr(entity_id, ''friendly_name'') }}'
              message: "{% set summary = state_attr(entity_id, 'release_summary')
                %} Newest version is {{ state_attr(entity_id, 'latest_version') }}<br>
                Installed version is {{ state_attr(entity_id, 'installed_version')
                }} {% if include_core_check %}\n  <br>Config check has {{ 'completed,
                check addon logs for status.'\n    if core_check_complete else 'started,
                should be done soon.' }}\n{% endif %} {{ '<br>' ~ summary if summary
                is string }}"
              url: "{% set url = device_attr(entity_id, 'configuration_url') %} {%
                set ids = device_attr(entity_id, 'identifiers') | first %} {% if url
                is string %}\n  {{ url | regex_replace('^homeassistant://') }}\n{%
                elif ids[0] == 'hassio' and ids[1] in ['supervisor', 'OS'] %}\n  /hassio/system\n{%
                elif run_config_check and ids[0] == 'hassio' and ids[1] == 'core'
                %}\n  /hassio/addon/core_check_config/logs\n{% else %}\n  /config\n{%
                endif %}"
              data:
                tag: '{{ entity_id[7:] }}'
                channel: Updates
                group: Updates
                notification_icon: mdi:package-up
                icon_url: '{{ state_attr(entity_id, ''entity_picture'') | default('''',
                  true) }}'
                url: '{{ url }}'
                clickAction: '{{ url }}'
                sticky: 'true'
                actions: "{{ ([changelog_action] if changelog_action.uri is string
                  else []) + [update_action] +\n  ([] if ids[0] == 'hassio' and ids[1]
                  == 'supervisor' else [skip_action]) }}"
          - choose:
              alias: Only send to mobile devices if within provided time range
              conditions:
                condition: time
                after: 00:00:00
                before: 00:00:00
              sequence:
              - choose: []
                default:
                - variables:
                    data: '{{ dict(data, action_data={''tag'': data.tag}) }}'
                - choose:
                    alias: Send to first mobile device if specified
                    conditions:
                    - condition: template
                      value_template: '{{ not not mobile_app_device }}'
                    sequence:
                      device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
                      domain: mobile_app
                      type: notify
                      title: '{{ title | default('''') }}'
                      message: "{{ message if device_attr(mobile_app_device, 'manufacturer')
                        != 'Apple'\n    else message | replace('<br>', '\\n') }}"
                      data: "{{ data if\n      device_attr(mobile_app_device, 'manufacturer')
                        != 'Apple' or data.icon_url is not string\n    else dict(data,
                        image=data.icon_url) }}"
                - choose:
                  - alias: Send to second mobile device if specified
                    conditions:
                    - condition: template
                      value_template: '{{ not not mobile_app_device_2 }}'
                    sequence:
                      device_id: 11ecfffb8a3d3e8cb0640a1f7d3ec024
                      domain: mobile_app
                      type: notify
                      title: '{{ title | default('''') }}'
                      message: "{{ message if device_attr(mobile_app_device_2, 'manufacturer')
                        != 'Apple'\n    else message | replace('<br>', '\\n') }}"
                      data: "{{ data if\n      device_attr(mobile_app_device_2, 'manufacturer')
                        != 'Apple' or data.icon_url is not string\n    else dict(data,
                        image=data.icon_url) }}"
          - alias: Send to HA if replicating there
            choose:
              conditions:
              - condition: template
                value_template: '{{ send_to_ha }}'
              sequence:
                data:
                  notification_id: '{{ entity_id[7:] }}'
                  title: '{{ title }}'
                  message: "{{ '%s\\n\\n### More info\\n- [Open](%s)' % (message |
                    replace('<br>', '\\n'), data.url) ~\n  ('\\n- [Changelog](%s)'
                    % changelog_action.uri if changelog_action.uri is string else
                    '') }}"
                action: persistent_notification.create
  mode: parallel
  max: 100
  trigger_variables:
    _reminder_hours: '3'
    reminder_hours: '{{ _reminder_hours | default(0) | int(0) }}'
    run_config_check: false
    update_entities:
    - update.home_assistant_core_update
    - update.home_assistant_operating_system_update
    - update.home_assistant_supervisor_update
  variables:
    mobile_app_device: 11ecfffb8a3d3e8cb0640a1f7d3ec024
    _mobile_app_device_2: 11ecfffb8a3d3e8cb0640a1f7d3ec024
    mobile_app_device_2: '{{ _mobile_app_device_2 if _mobile_app_device_2 != mobile_app_device
      }}'
    send_to_ha: false
    _changelog_urls: none
    changelog_urls: '{{ _changelog_urls if _changelog_urls is mapping else {} }}'
    take_backup: false
    core_update_entity: "{% for u in integration_entities('hassio') | select('search',
      '^update[.]')\n        if (device_attr(u, 'identifiers') | first)[1] == 'core'
      %}\n    {{ u }}\n{% endfor %}"
    os_update_entity: "{% for u in integration_entities('hassio') | select('search',
      '^update[.]')\n        if (device_attr(u, 'identifiers') | first)[1] == 'OS'
      %}\n    {{ u }}\n{% endfor %}"
    skip_action:
      action: skip-update
      title: Skip
      destructive: true
      authenticationRequired: true
    update_action:
      action: install-update
      title: Update
      destructive: true
      authenticationRequired: true
